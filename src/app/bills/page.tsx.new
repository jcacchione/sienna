"use client";

import React, { useState } from 'react';
import Header from '@/components/Header';
import Navbar from '@/components/Navbar';
import { Calendar, AlertCircle, CheckCircle, Plus, Trash2 } from 'lucide-react';

// Define the bill item type
type BillItem = {
  id: string;
  name: string;
  amount: string;
  dueDate: string;
  category: string;
  isPaid: boolean;
  provider: string;
  isRecurring: boolean;
  frequency?: string;
};

export default function Bills() {
  // Tab state
  const [activeTab, setActiveTab] = useState<'due-soon' | 'upcoming' | 'paid'>('due-soon');
  
  // Search and sort state for paid bills
  const [searchQuery, setSearchQuery] = useState('');
  const [sortOrder, setSortOrder] = useState<'newest' | 'oldest'>('newest');
  
  // Sample bills data
  const [bills, setBills] = useState<BillItem[]>([
    { 
      id: '1', 
      name: 'Rent', 
      amount: '€850', 
      dueDate: '2025-05-01', 
      category: 'Housing', 
      isPaid: true, 
      provider: 'Landlord',
      isRecurring: true,
      frequency: 'Monthly'
    },
    { 
      id: '2', 
      name: 'Electricity', 
      amount: '€78.50', 
      dueDate: '2025-05-15', 
      category: 'Utilities', 
      isPaid: false, 
      provider: 'Electric Ireland',
      isRecurring: true,
      frequency: 'Monthly'
    },
    { 
      id: '3', 
      name: 'Internet', 
      amount: '€45', 
      dueDate: '2025-05-20', 
      category: 'Utilities', 
      isPaid: false, 
      provider: 'Eir',
      isRecurring: true,
      frequency: 'Monthly'
    },
    { 
      id: '4', 
      name: 'Phone Bill', 
      amount: '€35', 
      dueDate: '2025-05-22', 
      category: 'Utilities', 
      isPaid: false, 
      provider: 'Three',
      isRecurring: true,
      frequency: 'Monthly'
    },
    { 
      id: '5', 
      name: 'TV License', 
      amount: '€160', 
      dueDate: '2025-08-15', 
      category: 'Government', 
      isPaid: false, 
      provider: 'An Post',
      isRecurring: true,
      frequency: 'Annual'
    },
    { 
      id: '6', 
      name: 'Bin Collection', 
      amount: '€75', 
      dueDate: '2025-07-01', 
      category: 'Services', 
      isPaid: false, 
      provider: 'Greyhound',
      isRecurring: true,
      frequency: 'Quarterly'
    },
    { 
      id: '7', 
      name: 'Water Charges', 
      amount: '€89.50', 
      dueDate: '2025-04-10', 
      category: 'Utilities', 
      isPaid: true, 
      provider: 'Irish Water',
      isRecurring: true,
      frequency: 'Quarterly'
    },
    { 
      id: '8', 
      name: 'Home Insurance', 
      amount: '€235', 
      dueDate: '2025-04-05', 
      category: 'Insurance', 
      isPaid: true, 
      provider: 'Zurich',
      isRecurring: true,
      frequency: 'Annual'
    }
  ]);

  // State for new bill form
  const [showAddForm, setShowAddForm] = useState(false);
  const [newBill, setNewBill] = useState<Partial<BillItem>>({
    name: '',
    amount: '',
    dueDate: '',
    category: 'Utilities',
    isPaid: false,
    provider: '',
    isRecurring: true,
    frequency: 'Monthly'
  });

  // Toggle bill paid status
  const togglePaidStatus = (id: string) => {
    setBills(prevBills => 
      prevBills.map(bill => 
        bill.id === id ? { ...bill, isPaid: !bill.isPaid } : bill
      )
    );
  };

  // Delete a bill
  const deleteBill = (id: string) => {
    setBills(prevBills => prevBills.filter(bill => bill.id !== id));
  };

  // Add a new bill
  const addNewBill = () => {
    if (!newBill.name || !newBill.amount || !newBill.dueDate) return;
    
    const bill: BillItem = {
      id: `new-${Date.now()}`,
      name: newBill.name || '',
      amount: newBill.amount || '',
      dueDate: newBill.dueDate || '',
      category: newBill.category || 'Utilities',
      isPaid: false,
      provider: newBill.provider || '',
      isRecurring: newBill.isRecurring || false,
      frequency: newBill.isRecurring ? (newBill.frequency || 'Monthly') : undefined
    };
    
    setBills(prevBills => [...prevBills, bill]);
    setNewBill({
      name: '',
      amount: '',
      dueDate: '',
      category: 'Utilities',
      isPaid: false,
      provider: '',
      isRecurring: true,
      frequency: 'Monthly'
    });
    setShowAddForm(false);
  };

  // Calculate total due and paid amounts
  const totalDue = bills.filter(bill => !bill.isPaid).reduce((sum, bill) => {
    const amount = parseFloat(bill.amount.replace('€', '').replace(',', ''));
    return isNaN(amount) ? sum : sum + amount;
  }, 0);

  const totalPaid = bills.filter(bill => bill.isPaid).reduce((sum, bill) => {
    const amount = parseFloat(bill.amount.replace('€', '').replace(',', ''));
    return isNaN(amount) ? sum : sum + amount;
  }, 0);
  
  // Get days until due for a bill
  const getDaysUntilDue = (dueDate: string) => {
    const today = new Date();
    const due = new Date(dueDate);
    const diffTime = due.getTime() - today.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };
  
  // Separate bills into due soon (next 30 days) and due later (beyond 30 days)
  const dueSoonBills = bills.filter(bill => !bill.isPaid && getDaysUntilDue(bill.dueDate) <= 30 && getDaysUntilDue(bill.dueDate) >= 0);
  const dueLaterBills = bills.filter(bill => !bill.isPaid && getDaysUntilDue(bill.dueDate) > 30);
  const paidBills = bills.filter(bill => bill.isPaid);

  // Format date to be more readable
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-IE', { day: 'numeric', month: 'short', year: 'numeric' });
  };
